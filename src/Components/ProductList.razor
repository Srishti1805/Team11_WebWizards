@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<!-- Input for Filtering -->
<div>
    <div class="row">
        <!-- Input for the filter string -->
        <div class="col">
            <input type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
             <!-- Button to enable filtering -->
            <button @onclick="(e => EnableFilterData())" class="btn btn-primary">Filter</button>
            <!-- Button to clear the filter -->
            <button @onclick="(e => ClearFilterData())" class="btn btn-primary">Clear</button>
        </div>
    </div>
</div>

<!-- Display Products Grouped by ProductType -->
<div class="container-fluid">
    @{
        var productList = ProductService.GetProducts();

        /*

            Change the grouping sort order to be
            Order by ProductType
            Then order by ProductList Alphabetic within the Product data set

        */

        // Group by the Enum
        foreach (ProductTypeEnum productType in Enum.GetValues(typeof(ProductTypeEnum)))
        {
            // Get only the products that are of this enum type
            var productListGroup = productList.Where(m => m.ProductType == productType);

            // Order the list alphabetical
            productListGroup = productListGroup.OrderBy(m => m.Title);

            // If filter is enabled, reduce the data set to the filter string
            if (FilterData)
            {
                productListGroup = productListGroup.Where(m => m.Title.Contains(FilterDataString, StringComparison.OrdinalIgnoreCase));
            }

            if (productListGroup.Any())
            {

                <hr />
                <h2>@productType.DisplayName()</h2>

                <div class="row">
                    <div class="card-columns">
                    <!-- Display individual product cards -->
                        @foreach (var product in productListGroup)
                        {
                            <div class="card">
                                <div class="card-img" style="background-image: url('@product.Image');">
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">@product.Title</h5>
                                </div>
                                <div class="card-footer">
                                    <small class="text-muted">
                                        <button @onclick="(e => SelectProduct(product.Id))" id="MoreInfoButton_@product.Id" data-toggle="modal" data-target="#productModal" class="btn btn-primary" style="background-color: black;">More Info</button>
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    }
</div>

<!-- Product Details Modal -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        @if (selectedProduct != null)
        {
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col">
                                @{
                                    var voteString = @voteLabel + " " + @currentRating + " ";

                                    if (voteCount == 0)
                                    {
                                        voteString = "Be the first to vote!";
                                    }

                                    <span>@voteString</span>

                                    for (int i = 1; i < 6; i++)
                                    {
                                        var currentStar = i;
                                        var checkedText = "";

                                        if (i <= currentRating)
                                        {
                                            checkedText = "checked";
                                        }

                                        <span class="fa fa-star @checkedText" @onclick="(e => SubmitRating(currentStar))"></span>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    // Represents the selected product and related information
    ProductModel selectedProduct;

    // Stores the ID of the selected product
    string selectedProductId;

    // Handles the selection of a product and updates the current rating
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    // Represents the current average rating of the selected product
    float currentRating = 0;

    // Represents the total number of votes received for the selected product
    float voteCount = 0;

    // Represents the label to display along with the current rating
    string voteLabel;

    /// <summary>
    /// Calculates and updates the current rating for the selected product
    /// </summary>
    void GetCurrentRating()
    {
        // Check the ratings field and if null
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        // Check the ratings field and if not null
        if (selectedProduct.Ratings != null)
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount == 0 ? "" : "Current Rating: ";
            currentRating = (float)Math.Round(selectedProduct.Ratings.Sum() / voteCount, 1);
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    /// <summary>
    /// Submits a user rating for the selected product
    /// </summary>
    /// <param name="rating"></param>
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    // Represents the filter string for product data
    public string FilterDataString = "";

    // Represents a flag indicating whether filtering is enabled
    public bool FilterData = false;

    /// <summary>
    /// Updates the filter text based on user input
    /// </summary>
    /// <param name="text"></param>
    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    /// <summary>
    /// Enables product data filtering
    /// </summary>
    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }

    /// <summary>
    /// Clears the product data filter
    /// </summary>
    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
    }
}